// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: com/orbservability/schema/v1/event_gateway_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventGatewayService_StreamEvents_FullMethodName = "/com.orbservability.schema.v1.EventGatewayService/StreamEvents"
)

// EventGatewayServiceClient is the client API for EventGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventGatewayServiceClient interface {
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (EventGatewayService_StreamEventsClient, error)
}

type eventGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventGatewayServiceClient(cc grpc.ClientConnInterface) EventGatewayServiceClient {
	return &eventGatewayServiceClient{cc}
}

func (c *eventGatewayServiceClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (EventGatewayService_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventGatewayService_ServiceDesc.Streams[0], EventGatewayService_StreamEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventGatewayServiceStreamEventsClient{stream}
	return x, nil
}

type EventGatewayService_StreamEventsClient interface {
	Send(*PixieEvent) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type eventGatewayServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *eventGatewayServiceStreamEventsClient) Send(m *PixieEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventGatewayServiceStreamEventsClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventGatewayServiceServer is the server API for EventGatewayService service.
// All implementations must embed UnimplementedEventGatewayServiceServer
// for forward compatibility
type EventGatewayServiceServer interface {
	StreamEvents(EventGatewayService_StreamEventsServer) error
	mustEmbedUnimplementedEventGatewayServiceServer()
}

// UnimplementedEventGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventGatewayServiceServer struct {
}

func (UnimplementedEventGatewayServiceServer) StreamEvents(EventGatewayService_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedEventGatewayServiceServer) mustEmbedUnimplementedEventGatewayServiceServer() {}

// UnsafeEventGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventGatewayServiceServer will
// result in compilation errors.
type UnsafeEventGatewayServiceServer interface {
	mustEmbedUnimplementedEventGatewayServiceServer()
}

func RegisterEventGatewayServiceServer(s grpc.ServiceRegistrar, srv EventGatewayServiceServer) {
	s.RegisterService(&EventGatewayService_ServiceDesc, srv)
}

func _EventGatewayService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventGatewayServiceServer).StreamEvents(&eventGatewayServiceStreamEventsServer{stream})
}

type EventGatewayService_StreamEventsServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*PixieEvent, error)
	grpc.ServerStream
}

type eventGatewayServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *eventGatewayServiceStreamEventsServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventGatewayServiceStreamEventsServer) Recv() (*PixieEvent, error) {
	m := new(PixieEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventGatewayService_ServiceDesc is the grpc.ServiceDesc for EventGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.orbservability.schema.v1.EventGatewayService",
	HandlerType: (*EventGatewayServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _EventGatewayService_StreamEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "com/orbservability/schema/v1/event_gateway_service.proto",
}
