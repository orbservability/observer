// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: com/orbservability/schema/v1/pixie_event.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PixieEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common fields
	ApiKey                  string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	Time                    string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Upid                    string `protobuf:"bytes,3,opt,name=upid,proto3" json:"upid,omitempty"`
	KubernetesNamespace     string `protobuf:"bytes,4,opt,name=kubernetes_namespace,json=kubernetesNamespace,proto3" json:"kubernetes_namespace,omitempty"`
	KubernetesService       string `protobuf:"bytes,5,opt,name=kubernetes_service,json=kubernetesService,proto3" json:"kubernetes_service,omitempty"`
	RemoteAddr              string `protobuf:"bytes,6,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	RemotePort              int32  `protobuf:"varint,7,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	KubernetesRemoteService string `protobuf:"bytes,8,opt,name=kubernetes_remote_service,json=kubernetesRemoteService,proto3" json:"kubernetes_remote_service,omitempty"`
	IsServerSideTracing     bool   `protobuf:"varint,9,opt,name=is_server_side_tracing,json=isServerSideTracing,proto3" json:"is_server_side_tracing,omitempty"`
	Latency                 int64  `protobuf:"varint,10,opt,name=latency,proto3" json:"latency,omitempty"`
	// Protocol-specific data
	//
	// Types that are assignable to ProtocolData:
	//
	//	*PixieEvent_Http
	//	*PixieEvent_Pgsql
	//	*PixieEvent_Mysql
	//	*PixieEvent_Redis
	//	*PixieEvent_Kafka
	//	*PixieEvent_Dns
	//	*PixieEvent_Nats
	//	*PixieEvent_Amqp
	//	*PixieEvent_Cql
	//	*PixieEvent_Mux
	ProtocolData isPixieEvent_ProtocolData `protobuf_oneof:"protocol_data"`
}

func (x *PixieEvent) Reset() {
	*x = PixieEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PixieEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PixieEvent) ProtoMessage() {}

func (x *PixieEvent) ProtoReflect() protoreflect.Message {
	mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PixieEvent.ProtoReflect.Descriptor instead.
func (*PixieEvent) Descriptor() ([]byte, []int) {
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP(), []int{0}
}

func (x *PixieEvent) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *PixieEvent) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *PixieEvent) GetUpid() string {
	if x != nil {
		return x.Upid
	}
	return ""
}

func (x *PixieEvent) GetKubernetesNamespace() string {
	if x != nil {
		return x.KubernetesNamespace
	}
	return ""
}

func (x *PixieEvent) GetKubernetesService() string {
	if x != nil {
		return x.KubernetesService
	}
	return ""
}

func (x *PixieEvent) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *PixieEvent) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *PixieEvent) GetKubernetesRemoteService() string {
	if x != nil {
		return x.KubernetesRemoteService
	}
	return ""
}

func (x *PixieEvent) GetIsServerSideTracing() bool {
	if x != nil {
		return x.IsServerSideTracing
	}
	return false
}

func (x *PixieEvent) GetLatency() int64 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (m *PixieEvent) GetProtocolData() isPixieEvent_ProtocolData {
	if m != nil {
		return m.ProtocolData
	}
	return nil
}

func (x *PixieEvent) GetHttp() *HypertextTransferProtocol {
	if x, ok := x.GetProtocolData().(*PixieEvent_Http); ok {
		return x.Http
	}
	return nil
}

func (x *PixieEvent) GetPgsql() *PostgreSQL {
	if x, ok := x.GetProtocolData().(*PixieEvent_Pgsql); ok {
		return x.Pgsql
	}
	return nil
}

func (x *PixieEvent) GetMysql() *MySQL {
	if x, ok := x.GetProtocolData().(*PixieEvent_Mysql); ok {
		return x.Mysql
	}
	return nil
}

func (x *PixieEvent) GetRedis() *Redis {
	if x, ok := x.GetProtocolData().(*PixieEvent_Redis); ok {
		return x.Redis
	}
	return nil
}

func (x *PixieEvent) GetKafka() *Kafka {
	if x, ok := x.GetProtocolData().(*PixieEvent_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (x *PixieEvent) GetDns() *DomainNameSystem {
	if x, ok := x.GetProtocolData().(*PixieEvent_Dns); ok {
		return x.Dns
	}
	return nil
}

func (x *PixieEvent) GetNats() *NeuralAutonomicTransportSystem {
	if x, ok := x.GetProtocolData().(*PixieEvent_Nats); ok {
		return x.Nats
	}
	return nil
}

func (x *PixieEvent) GetAmqp() *AdvancedMessageQueuingProtocol {
	if x, ok := x.GetProtocolData().(*PixieEvent_Amqp); ok {
		return x.Amqp
	}
	return nil
}

func (x *PixieEvent) GetCql() *CassandraQueryLanguage {
	if x, ok := x.GetProtocolData().(*PixieEvent_Cql); ok {
		return x.Cql
	}
	return nil
}

func (x *PixieEvent) GetMux() *Multiplexing {
	if x, ok := x.GetProtocolData().(*PixieEvent_Mux); ok {
		return x.Mux
	}
	return nil
}

type isPixieEvent_ProtocolData interface {
	isPixieEvent_ProtocolData()
}

type PixieEvent_Http struct {
	Http *HypertextTransferProtocol `protobuf:"bytes,11,opt,name=http,proto3,oneof"`
}

type PixieEvent_Pgsql struct {
	Pgsql *PostgreSQL `protobuf:"bytes,12,opt,name=pgsql,proto3,oneof"`
}

type PixieEvent_Mysql struct {
	Mysql *MySQL `protobuf:"bytes,13,opt,name=mysql,proto3,oneof"`
}

type PixieEvent_Redis struct {
	Redis *Redis `protobuf:"bytes,14,opt,name=redis,proto3,oneof"`
}

type PixieEvent_Kafka struct {
	Kafka *Kafka `protobuf:"bytes,15,opt,name=kafka,proto3,oneof"`
}

type PixieEvent_Dns struct {
	Dns *DomainNameSystem `protobuf:"bytes,16,opt,name=dns,proto3,oneof"`
}

type PixieEvent_Nats struct {
	Nats *NeuralAutonomicTransportSystem `protobuf:"bytes,17,opt,name=nats,proto3,oneof"`
}

type PixieEvent_Amqp struct {
	Amqp *AdvancedMessageQueuingProtocol `protobuf:"bytes,18,opt,name=amqp,proto3,oneof"`
}

type PixieEvent_Cql struct {
	Cql *CassandraQueryLanguage `protobuf:"bytes,19,opt,name=cql,proto3,oneof"`
}

type PixieEvent_Mux struct {
	Mux *Multiplexing `protobuf:"bytes,20,opt,name=mux,proto3,oneof"`
}

func (*PixieEvent_Http) isPixieEvent_ProtocolData() {}

func (*PixieEvent_Pgsql) isPixieEvent_ProtocolData() {}

func (*PixieEvent_Mysql) isPixieEvent_ProtocolData() {}

func (*PixieEvent_Redis) isPixieEvent_ProtocolData() {}

func (*PixieEvent_Kafka) isPixieEvent_ProtocolData() {}

func (*PixieEvent_Dns) isPixieEvent_ProtocolData() {}

func (*PixieEvent_Nats) isPixieEvent_ProtocolData() {}

func (*PixieEvent_Amqp) isPixieEvent_ProtocolData() {}

func (*PixieEvent_Cql) isPixieEvent_ProtocolData() {}

func (*PixieEvent_Mux) isPixieEvent_ProtocolData() {}

// https://docs.px.dev/reference/datatables/amqp_events/
type AdvancedMessageQueuingProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameType    int64  `protobuf:"varint,1,opt,name=frame_type,json=frameType,proto3" json:"frame_type,omitempty"`
	ReqClassId   int64  `protobuf:"varint,2,opt,name=req_class_id,json=reqClassId,proto3" json:"req_class_id,omitempty"`
	ReqMethodId  int64  `protobuf:"varint,3,opt,name=req_method_id,json=reqMethodId,proto3" json:"req_method_id,omitempty"`
	RespClassId  int64  `protobuf:"varint,4,opt,name=resp_class_id,json=respClassId,proto3" json:"resp_class_id,omitempty"`
	RespMethodId int64  `protobuf:"varint,5,opt,name=resp_method_id,json=respMethodId,proto3" json:"resp_method_id,omitempty"`
	ReqMsg       string `protobuf:"bytes,6,opt,name=req_msg,json=reqMsg,proto3" json:"req_msg,omitempty"`
	RespMsg      string `protobuf:"bytes,7,opt,name=resp_msg,json=respMsg,proto3" json:"resp_msg,omitempty"`
}

func (x *AdvancedMessageQueuingProtocol) Reset() {
	*x = AdvancedMessageQueuingProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedMessageQueuingProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedMessageQueuingProtocol) ProtoMessage() {}

func (x *AdvancedMessageQueuingProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedMessageQueuingProtocol.ProtoReflect.Descriptor instead.
func (*AdvancedMessageQueuingProtocol) Descriptor() ([]byte, []int) {
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP(), []int{1}
}

func (x *AdvancedMessageQueuingProtocol) GetFrameType() int64 {
	if x != nil {
		return x.FrameType
	}
	return 0
}

func (x *AdvancedMessageQueuingProtocol) GetReqClassId() int64 {
	if x != nil {
		return x.ReqClassId
	}
	return 0
}

func (x *AdvancedMessageQueuingProtocol) GetReqMethodId() int64 {
	if x != nil {
		return x.ReqMethodId
	}
	return 0
}

func (x *AdvancedMessageQueuingProtocol) GetRespClassId() int64 {
	if x != nil {
		return x.RespClassId
	}
	return 0
}

func (x *AdvancedMessageQueuingProtocol) GetRespMethodId() int64 {
	if x != nil {
		return x.RespMethodId
	}
	return 0
}

func (x *AdvancedMessageQueuingProtocol) GetReqMsg() string {
	if x != nil {
		return x.ReqMsg
	}
	return ""
}

func (x *AdvancedMessageQueuingProtocol) GetRespMsg() string {
	if x != nil {
		return x.RespMsg
	}
	return ""
}

// https://docs.px.dev/reference/datatables/cql_events/
type CassandraQueryLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqOp    int64  `protobuf:"varint,1,opt,name=req_op,json=reqOp,proto3" json:"req_op,omitempty"`
	ReqBody  string `protobuf:"bytes,2,opt,name=req_body,json=reqBody,proto3" json:"req_body,omitempty"`
	RespOp   int64  `protobuf:"varint,3,opt,name=resp_op,json=respOp,proto3" json:"resp_op,omitempty"`
	RespBody string `protobuf:"bytes,4,opt,name=resp_body,json=respBody,proto3" json:"resp_body,omitempty"`
}

func (x *CassandraQueryLanguage) Reset() {
	*x = CassandraQueryLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CassandraQueryLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CassandraQueryLanguage) ProtoMessage() {}

func (x *CassandraQueryLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CassandraQueryLanguage.ProtoReflect.Descriptor instead.
func (*CassandraQueryLanguage) Descriptor() ([]byte, []int) {
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP(), []int{2}
}

func (x *CassandraQueryLanguage) GetReqOp() int64 {
	if x != nil {
		return x.ReqOp
	}
	return 0
}

func (x *CassandraQueryLanguage) GetReqBody() string {
	if x != nil {
		return x.ReqBody
	}
	return ""
}

func (x *CassandraQueryLanguage) GetRespOp() int64 {
	if x != nil {
		return x.RespOp
	}
	return 0
}

func (x *CassandraQueryLanguage) GetRespBody() string {
	if x != nil {
		return x.RespBody
	}
	return ""
}

// https://docs.px.dev/reference/datatables/dns_events/
type DomainNameSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqHeader  string `protobuf:"bytes,1,opt,name=req_header,json=reqHeader,proto3" json:"req_header,omitempty"`
	ReqBody    string `protobuf:"bytes,2,opt,name=req_body,json=reqBody,proto3" json:"req_body,omitempty"`
	RespHeader string `protobuf:"bytes,3,opt,name=resp_header,json=respHeader,proto3" json:"resp_header,omitempty"`
	RespBody   string `protobuf:"bytes,4,opt,name=resp_body,json=respBody,proto3" json:"resp_body,omitempty"`
}

func (x *DomainNameSystem) Reset() {
	*x = DomainNameSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainNameSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainNameSystem) ProtoMessage() {}

func (x *DomainNameSystem) ProtoReflect() protoreflect.Message {
	mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainNameSystem.ProtoReflect.Descriptor instead.
func (*DomainNameSystem) Descriptor() ([]byte, []int) {
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP(), []int{3}
}

func (x *DomainNameSystem) GetReqHeader() string {
	if x != nil {
		return x.ReqHeader
	}
	return ""
}

func (x *DomainNameSystem) GetReqBody() string {
	if x != nil {
		return x.ReqBody
	}
	return ""
}

func (x *DomainNameSystem) GetRespHeader() string {
	if x != nil {
		return x.RespHeader
	}
	return ""
}

func (x *DomainNameSystem) GetRespBody() string {
	if x != nil {
		return x.RespBody
	}
	return ""
}

// https://docs.px.dev/reference/datatables/http_events/
type HypertextTransferProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MajorVersion int32  `protobuf:"varint,1,opt,name=major_version,json=majorVersion,proto3" json:"major_version,omitempty"`
	MinorVersion int32  `protobuf:"varint,2,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
	ReqHeaders   string `protobuf:"bytes,3,opt,name=req_headers,json=reqHeaders,proto3" json:"req_headers,omitempty"`
	ReqMethod    string `protobuf:"bytes,4,opt,name=req_method,json=reqMethod,proto3" json:"req_method,omitempty"`
	ReqPath      string `protobuf:"bytes,5,opt,name=req_path,json=reqPath,proto3" json:"req_path,omitempty"`
	ReqBody      string `protobuf:"bytes,6,opt,name=req_body,json=reqBody,proto3" json:"req_body,omitempty"`
	ReqBodySize  int64  `protobuf:"varint,7,opt,name=req_body_size,json=reqBodySize,proto3" json:"req_body_size,omitempty"`
	RespHeaders  string `protobuf:"bytes,8,opt,name=resp_headers,json=respHeaders,proto3" json:"resp_headers,omitempty"`
	RespStatus   int32  `protobuf:"varint,9,opt,name=resp_status,json=respStatus,proto3" json:"resp_status,omitempty"`
	RespMessage  string `protobuf:"bytes,10,opt,name=resp_message,json=respMessage,proto3" json:"resp_message,omitempty"`
	RespBody     string `protobuf:"bytes,11,opt,name=resp_body,json=respBody,proto3" json:"resp_body,omitempty"`
	RespBodySize int64  `protobuf:"varint,12,opt,name=resp_body_size,json=respBodySize,proto3" json:"resp_body_size,omitempty"`
}

func (x *HypertextTransferProtocol) Reset() {
	*x = HypertextTransferProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HypertextTransferProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypertextTransferProtocol) ProtoMessage() {}

func (x *HypertextTransferProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypertextTransferProtocol.ProtoReflect.Descriptor instead.
func (*HypertextTransferProtocol) Descriptor() ([]byte, []int) {
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP(), []int{4}
}

func (x *HypertextTransferProtocol) GetMajorVersion() int32 {
	if x != nil {
		return x.MajorVersion
	}
	return 0
}

func (x *HypertextTransferProtocol) GetMinorVersion() int32 {
	if x != nil {
		return x.MinorVersion
	}
	return 0
}

func (x *HypertextTransferProtocol) GetReqHeaders() string {
	if x != nil {
		return x.ReqHeaders
	}
	return ""
}

func (x *HypertextTransferProtocol) GetReqMethod() string {
	if x != nil {
		return x.ReqMethod
	}
	return ""
}

func (x *HypertextTransferProtocol) GetReqPath() string {
	if x != nil {
		return x.ReqPath
	}
	return ""
}

func (x *HypertextTransferProtocol) GetReqBody() string {
	if x != nil {
		return x.ReqBody
	}
	return ""
}

func (x *HypertextTransferProtocol) GetReqBodySize() int64 {
	if x != nil {
		return x.ReqBodySize
	}
	return 0
}

func (x *HypertextTransferProtocol) GetRespHeaders() string {
	if x != nil {
		return x.RespHeaders
	}
	return ""
}

func (x *HypertextTransferProtocol) GetRespStatus() int32 {
	if x != nil {
		return x.RespStatus
	}
	return 0
}

func (x *HypertextTransferProtocol) GetRespMessage() string {
	if x != nil {
		return x.RespMessage
	}
	return ""
}

func (x *HypertextTransferProtocol) GetRespBody() string {
	if x != nil {
		return x.RespBody
	}
	return ""
}

func (x *HypertextTransferProtocol) GetRespBodySize() int64 {
	if x != nil {
		return x.RespBodySize
	}
	return 0
}

// https://docs.px.dev/reference/datatables/kafka_events.beta/
type Kafka struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqCmd   int64  `protobuf:"varint,1,opt,name=req_cmd,json=reqCmd,proto3" json:"req_cmd,omitempty"`
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ReqBody  string `protobuf:"bytes,3,opt,name=req_body,json=reqBody,proto3" json:"req_body,omitempty"`
	Resp     string `protobuf:"bytes,4,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *Kafka) Reset() {
	*x = Kafka{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kafka) ProtoMessage() {}

func (x *Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kafka.ProtoReflect.Descriptor instead.
func (*Kafka) Descriptor() ([]byte, []int) {
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP(), []int{5}
}

func (x *Kafka) GetReqCmd() int64 {
	if x != nil {
		return x.ReqCmd
	}
	return 0
}

func (x *Kafka) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Kafka) GetReqBody() string {
	if x != nil {
		return x.ReqBody
	}
	return ""
}

func (x *Kafka) GetResp() string {
	if x != nil {
		return x.Resp
	}
	return ""
}

// https://docs.px.dev/reference/datatables/mux_events/
type Multiplexing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqType int64 `protobuf:"varint,1,opt,name=req_type,json=reqType,proto3" json:"req_type,omitempty"`
}

func (x *Multiplexing) Reset() {
	*x = Multiplexing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Multiplexing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multiplexing) ProtoMessage() {}

func (x *Multiplexing) ProtoReflect() protoreflect.Message {
	mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multiplexing.ProtoReflect.Descriptor instead.
func (*Multiplexing) Descriptor() ([]byte, []int) {
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP(), []int{6}
}

func (x *Multiplexing) GetReqType() int64 {
	if x != nil {
		return x.ReqType
	}
	return 0
}

// https://docs.px.dev/reference/datatables/mysql_events/
type MySQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqCmd     int64  `protobuf:"varint,1,opt,name=req_cmd,json=reqCmd,proto3" json:"req_cmd,omitempty"`
	ReqBody    string `protobuf:"bytes,2,opt,name=req_body,json=reqBody,proto3" json:"req_body,omitempty"`
	RespStatus int64  `protobuf:"varint,3,opt,name=resp_status,json=respStatus,proto3" json:"resp_status,omitempty"`
	RespBody   string `protobuf:"bytes,4,opt,name=resp_body,json=respBody,proto3" json:"resp_body,omitempty"`
}

func (x *MySQL) Reset() {
	*x = MySQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQL) ProtoMessage() {}

func (x *MySQL) ProtoReflect() protoreflect.Message {
	mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQL.ProtoReflect.Descriptor instead.
func (*MySQL) Descriptor() ([]byte, []int) {
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP(), []int{7}
}

func (x *MySQL) GetReqCmd() int64 {
	if x != nil {
		return x.ReqCmd
	}
	return 0
}

func (x *MySQL) GetReqBody() string {
	if x != nil {
		return x.ReqBody
	}
	return ""
}

func (x *MySQL) GetRespStatus() int64 {
	if x != nil {
		return x.RespStatus
	}
	return 0
}

func (x *MySQL) GetRespBody() string {
	if x != nil {
		return x.RespBody
	}
	return ""
}

// https://docs.px.dev/reference/datatables/nats_events.beta/
type NeuralAutonomicTransportSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd  string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Resp string `protobuf:"bytes,3,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *NeuralAutonomicTransportSystem) Reset() {
	*x = NeuralAutonomicTransportSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeuralAutonomicTransportSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeuralAutonomicTransportSystem) ProtoMessage() {}

func (x *NeuralAutonomicTransportSystem) ProtoReflect() protoreflect.Message {
	mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeuralAutonomicTransportSystem.ProtoReflect.Descriptor instead.
func (*NeuralAutonomicTransportSystem) Descriptor() ([]byte, []int) {
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP(), []int{8}
}

func (x *NeuralAutonomicTransportSystem) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *NeuralAutonomicTransportSystem) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *NeuralAutonomicTransportSystem) GetResp() string {
	if x != nil {
		return x.Resp
	}
	return ""
}

// https://docs.px.dev/reference/datatables/pgsql_events/
type PostgreSQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqCmd string `protobuf:"bytes,1,opt,name=req_cmd,json=reqCmd,proto3" json:"req_cmd,omitempty"`
	Req    string `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	Resp   string `protobuf:"bytes,3,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *PostgreSQL) Reset() {
	*x = PostgreSQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgreSQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQL) ProtoMessage() {}

func (x *PostgreSQL) ProtoReflect() protoreflect.Message {
	mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQL.ProtoReflect.Descriptor instead.
func (*PostgreSQL) Descriptor() ([]byte, []int) {
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP(), []int{9}
}

func (x *PostgreSQL) GetReqCmd() string {
	if x != nil {
		return x.ReqCmd
	}
	return ""
}

func (x *PostgreSQL) GetReq() string {
	if x != nil {
		return x.Req
	}
	return ""
}

func (x *PostgreSQL) GetResp() string {
	if x != nil {
		return x.Resp
	}
	return ""
}

// https://docs.px.dev/reference/datatables/redis_events/
type Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqCmd  string `protobuf:"bytes,1,opt,name=req_cmd,json=reqCmd,proto3" json:"req_cmd,omitempty"`
	ReqArgs string `protobuf:"bytes,2,opt,name=req_args,json=reqArgs,proto3" json:"req_args,omitempty"`
	Resp    string `protobuf:"bytes,3,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *Redis) Reset() {
	*x = Redis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP(), []int{10}
}

func (x *Redis) GetReqCmd() string {
	if x != nil {
		return x.ReqCmd
	}
	return ""
}

func (x *Redis) GetReqArgs() string {
	if x != nil {
		return x.ReqArgs
	}
	return ""
}

func (x *Redis) GetResp() string {
	if x != nil {
		return x.Resp
	}
	return ""
}

// TODO: are we going to use this?
// https://docs.px.dev/reference/datatables/proc_exit_events/
type AbnormalProcessExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Upid     string `protobuf:"bytes,2,opt,name=upid,proto3" json:"upid,omitempty"`
	ExitCode int64  `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Signal   int64  `protobuf:"varint,4,opt,name=signal,proto3" json:"signal,omitempty"`
	Comm     string `protobuf:"bytes,5,opt,name=comm,proto3" json:"comm,omitempty"`
}

func (x *AbnormalProcessExit) Reset() {
	*x = AbnormalProcessExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbnormalProcessExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbnormalProcessExit) ProtoMessage() {}

func (x *AbnormalProcessExit) ProtoReflect() protoreflect.Message {
	mi := &file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbnormalProcessExit.ProtoReflect.Descriptor instead.
func (*AbnormalProcessExit) Descriptor() ([]byte, []int) {
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP(), []int{11}
}

func (x *AbnormalProcessExit) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *AbnormalProcessExit) GetUpid() string {
	if x != nil {
		return x.Upid
	}
	return ""
}

func (x *AbnormalProcessExit) GetExitCode() int64 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *AbnormalProcessExit) GetSignal() int64 {
	if x != nil {
		return x.Signal
	}
	return 0
}

func (x *AbnormalProcessExit) GetComm() string {
	if x != nil {
		return x.Comm
	}
	return ""
}

var File_com_orbservability_schema_v1_pixie_event_proto protoreflect.FileDescriptor

var file_com_orbservability_schema_v1_pixie_event_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x69, 0x78, 0x69, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x72, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x22, 0xcb,
	0x08, 0x0a, 0x0a, 0x50, 0x69, 0x78, 0x69, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x70,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x70, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33,
	0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4d, 0x0a,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6f, 0x72, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x40, 0x0a, 0x05,
	0x70, 0x67, 0x73, 0x71, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6f, 0x72, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x53, 0x51, 0x4c, 0x48, 0x00, 0x52, 0x05, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x12, 0x3b,
	0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x72, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53,
	0x51, 0x4c, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x3b, 0x0a, 0x05, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6f, 0x72, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x72,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x48, 0x00, 0x52, 0x05,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x42, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x72, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x48, 0x00, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x04, 0x6e, 0x61, 0x74,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x72,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x75, 0x72, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a,
	0x04, 0x61, 0x6d, 0x71, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6f, 0x72, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x6d, 0x71,
	0x70, 0x12, 0x48, 0x0a, 0x03, 0x63, 0x71, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x72, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x63, 0x71, 0x6c, 0x12, 0x3e, 0x0a, 0x03, 0x6d,
	0x75, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f,
	0x72, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x78, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x75, 0x78, 0x42, 0x0f, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x02, 0x0a,
	0x1e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x70, 0x4d,
	0x73, 0x67, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x65, 0x71, 0x5f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72,
	0x65, 0x71, 0x4f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x70, 0x4f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x42, 0x6f,
	0x64, 0x79, 0x22, 0xa9, 0x03, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x71, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6c,
	0x0a, 0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x5f, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x71, 0x43, 0x6d, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x29, 0x0a, 0x0c,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x4d, 0x79, 0x53, 0x51, 0x4c,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x71, 0x43, 0x6d, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x42, 0x6f,
	0x64, 0x79, 0x22, 0x5a, 0x0a, 0x1e, 0x4e, 0x65, 0x75, 0x72, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f,
	0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x4b,
	0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x71, 0x43, 0x6d, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x4f, 0x0a, 0x05, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x71, 0x43, 0x6d, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x86, 0x01, 0x0a,
	0x13, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x78, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_orbservability_schema_v1_pixie_event_proto_rawDescOnce sync.Once
	file_com_orbservability_schema_v1_pixie_event_proto_rawDescData = file_com_orbservability_schema_v1_pixie_event_proto_rawDesc
)

func file_com_orbservability_schema_v1_pixie_event_proto_rawDescGZIP() []byte {
	file_com_orbservability_schema_v1_pixie_event_proto_rawDescOnce.Do(func() {
		file_com_orbservability_schema_v1_pixie_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_orbservability_schema_v1_pixie_event_proto_rawDescData)
	})
	return file_com_orbservability_schema_v1_pixie_event_proto_rawDescData
}

var file_com_orbservability_schema_v1_pixie_event_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_com_orbservability_schema_v1_pixie_event_proto_goTypes = []interface{}{
	(*PixieEvent)(nil),                     // 0: com.orbservability.schema.v1.PixieEvent
	(*AdvancedMessageQueuingProtocol)(nil), // 1: com.orbservability.schema.v1.AdvancedMessageQueuingProtocol
	(*CassandraQueryLanguage)(nil),         // 2: com.orbservability.schema.v1.CassandraQueryLanguage
	(*DomainNameSystem)(nil),               // 3: com.orbservability.schema.v1.DomainNameSystem
	(*HypertextTransferProtocol)(nil),      // 4: com.orbservability.schema.v1.HypertextTransferProtocol
	(*Kafka)(nil),                          // 5: com.orbservability.schema.v1.Kafka
	(*Multiplexing)(nil),                   // 6: com.orbservability.schema.v1.Multiplexing
	(*MySQL)(nil),                          // 7: com.orbservability.schema.v1.MySQL
	(*NeuralAutonomicTransportSystem)(nil), // 8: com.orbservability.schema.v1.NeuralAutonomicTransportSystem
	(*PostgreSQL)(nil),                     // 9: com.orbservability.schema.v1.PostgreSQL
	(*Redis)(nil),                          // 10: com.orbservability.schema.v1.Redis
	(*AbnormalProcessExit)(nil),            // 11: com.orbservability.schema.v1.AbnormalProcessExit
}
var file_com_orbservability_schema_v1_pixie_event_proto_depIdxs = []int32{
	4,  // 0: com.orbservability.schema.v1.PixieEvent.http:type_name -> com.orbservability.schema.v1.HypertextTransferProtocol
	9,  // 1: com.orbservability.schema.v1.PixieEvent.pgsql:type_name -> com.orbservability.schema.v1.PostgreSQL
	7,  // 2: com.orbservability.schema.v1.PixieEvent.mysql:type_name -> com.orbservability.schema.v1.MySQL
	10, // 3: com.orbservability.schema.v1.PixieEvent.redis:type_name -> com.orbservability.schema.v1.Redis
	5,  // 4: com.orbservability.schema.v1.PixieEvent.kafka:type_name -> com.orbservability.schema.v1.Kafka
	3,  // 5: com.orbservability.schema.v1.PixieEvent.dns:type_name -> com.orbservability.schema.v1.DomainNameSystem
	8,  // 6: com.orbservability.schema.v1.PixieEvent.nats:type_name -> com.orbservability.schema.v1.NeuralAutonomicTransportSystem
	1,  // 7: com.orbservability.schema.v1.PixieEvent.amqp:type_name -> com.orbservability.schema.v1.AdvancedMessageQueuingProtocol
	2,  // 8: com.orbservability.schema.v1.PixieEvent.cql:type_name -> com.orbservability.schema.v1.CassandraQueryLanguage
	6,  // 9: com.orbservability.schema.v1.PixieEvent.mux:type_name -> com.orbservability.schema.v1.Multiplexing
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_com_orbservability_schema_v1_pixie_event_proto_init() }
func file_com_orbservability_schema_v1_pixie_event_proto_init() {
	if File_com_orbservability_schema_v1_pixie_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PixieEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedMessageQueuingProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CassandraQueryLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainNameSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HypertextTransferProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kafka); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Multiplexing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeuralAutonomicTransportSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgreSQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Redis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbnormalProcessExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_orbservability_schema_v1_pixie_event_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PixieEvent_Http)(nil),
		(*PixieEvent_Pgsql)(nil),
		(*PixieEvent_Mysql)(nil),
		(*PixieEvent_Redis)(nil),
		(*PixieEvent_Kafka)(nil),
		(*PixieEvent_Dns)(nil),
		(*PixieEvent_Nats)(nil),
		(*PixieEvent_Amqp)(nil),
		(*PixieEvent_Cql)(nil),
		(*PixieEvent_Mux)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_orbservability_schema_v1_pixie_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_orbservability_schema_v1_pixie_event_proto_goTypes,
		DependencyIndexes: file_com_orbservability_schema_v1_pixie_event_proto_depIdxs,
		MessageInfos:      file_com_orbservability_schema_v1_pixie_event_proto_msgTypes,
	}.Build()
	File_com_orbservability_schema_v1_pixie_event_proto = out.File
	file_com_orbservability_schema_v1_pixie_event_proto_rawDesc = nil
	file_com_orbservability_schema_v1_pixie_event_proto_goTypes = nil
	file_com_orbservability_schema_v1_pixie_event_proto_depIdxs = nil
}
